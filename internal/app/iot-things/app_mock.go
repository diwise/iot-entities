// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package iotthings

import (
	"context"
	"github.com/diwise/iot-things/internal/app/iot-things/things"
	"io"
	"sync"
)

// Ensure, that ThingsAppMock does implement ThingsApp.
// If this is not the case, regenerate this file with moq.
var _ ThingsApp = &ThingsAppMock{}

// ThingsAppMock is a mock implementation of ThingsApp.
//
//	func TestSomethingThatUsesThingsApp(t *testing.T) {
//
//		// make and configure a mocked ThingsApp
//		mockedThingsApp := &ThingsAppMock{
//			AddThingFunc: func(ctx context.Context, b []byte) error {
//				panic("mock out the AddThing method")
//			},
//			AddValueFunc: func(ctx context.Context, t things.Thing, m things.Value) error {
//				panic("mock out the AddValue method")
//			},
//			GetConnectedThingsFunc: func(ctx context.Context, deviceID string) ([]things.Thing, error) {
//				panic("mock out the GetConnectedThings method")
//			},
//			GetTagsFunc: func(ctx context.Context, tenants []string) ([]string, error) {
//				panic("mock out the GetTags method")
//			},
//			GetTypesFunc: func(ctx context.Context, tenants []string) ([]string, error) {
//				panic("mock out the GetTypes method")
//			},
//			MergeThingFunc: func(ctx context.Context, thingID string, b []byte, tenants []string) error {
//				panic("mock out the MergeThing method")
//			},
//			QueryThingsFunc: func(ctx context.Context, params map[string][]string) (QueryResult, error) {
//				panic("mock out the QueryThings method")
//			},
//			SaveThingFunc: func(ctx context.Context, t things.Thing) error {
//				panic("mock out the SaveThing method")
//			},
//			SeedFunc: func(ctx context.Context, r io.Reader) error {
//				panic("mock out the Seed method")
//			},
//			UpdateThingFunc: func(ctx context.Context, b []byte, tenants []string) error {
//				panic("mock out the UpdateThing method")
//			},
//		}
//
//		// use mockedThingsApp in code that requires ThingsApp
//		// and then make assertions.
//
//	}
type ThingsAppMock struct {
	// AddThingFunc mocks the AddThing method.
	AddThingFunc func(ctx context.Context, b []byte) error

	// AddValueFunc mocks the AddValue method.
	AddValueFunc func(ctx context.Context, t things.Thing, m things.Value) error

	// GetConnectedThingsFunc mocks the GetConnectedThings method.
	GetConnectedThingsFunc func(ctx context.Context, deviceID string) ([]things.Thing, error)

	// GetTagsFunc mocks the GetTags method.
	GetTagsFunc func(ctx context.Context, tenants []string) ([]string, error)

	// GetTypesFunc mocks the GetTypes method.
	GetTypesFunc func(ctx context.Context, tenants []string) ([]string, error)

	// MergeThingFunc mocks the MergeThing method.
	MergeThingFunc func(ctx context.Context, thingID string, b []byte, tenants []string) error

	// QueryThingsFunc mocks the QueryThings method.
	QueryThingsFunc func(ctx context.Context, params map[string][]string) (QueryResult, error)

	// SaveThingFunc mocks the SaveThing method.
	SaveThingFunc func(ctx context.Context, t things.Thing) error

	// SeedFunc mocks the Seed method.
	SeedFunc func(ctx context.Context, r io.Reader) error

	// UpdateThingFunc mocks the UpdateThing method.
	UpdateThingFunc func(ctx context.Context, b []byte, tenants []string) error

	// calls tracks calls to the methods.
	calls struct {
		// AddThing holds details about calls to the AddThing method.
		AddThing []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// B is the b argument value.
			B []byte
		}
		// AddValue holds details about calls to the AddValue method.
		AddValue []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// T is the t argument value.
			T things.Thing
			// M is the m argument value.
			M things.Value
		}
		// GetConnectedThings holds details about calls to the GetConnectedThings method.
		GetConnectedThings []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
		}
		// GetTags holds details about calls to the GetTags method.
		GetTags []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// GetTypes holds details about calls to the GetTypes method.
		GetTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// MergeThing holds details about calls to the MergeThing method.
		MergeThing []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ThingID is the thingID argument value.
			ThingID string
			// B is the b argument value.
			B []byte
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// QueryThings holds details about calls to the QueryThings method.
		QueryThings []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params map[string][]string
		}
		// SaveThing holds details about calls to the SaveThing method.
		SaveThing []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// T is the t argument value.
			T things.Thing
		}
		// Seed holds details about calls to the Seed method.
		Seed []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R io.Reader
		}
		// UpdateThing holds details about calls to the UpdateThing method.
		UpdateThing []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// B is the b argument value.
			B []byte
			// Tenants is the tenants argument value.
			Tenants []string
		}
	}
	lockAddThing           sync.RWMutex
	lockAddValue           sync.RWMutex
	lockGetConnectedThings sync.RWMutex
	lockGetTags            sync.RWMutex
	lockGetTypes           sync.RWMutex
	lockMergeThing         sync.RWMutex
	lockQueryThings        sync.RWMutex
	lockSaveThing          sync.RWMutex
	lockSeed               sync.RWMutex
	lockUpdateThing        sync.RWMutex
}

// AddThing calls AddThingFunc.
func (mock *ThingsAppMock) AddThing(ctx context.Context, b []byte) error {
	if mock.AddThingFunc == nil {
		panic("ThingsAppMock.AddThingFunc: method is nil but ThingsApp.AddThing was just called")
	}
	callInfo := struct {
		Ctx context.Context
		B   []byte
	}{
		Ctx: ctx,
		B:   b,
	}
	mock.lockAddThing.Lock()
	mock.calls.AddThing = append(mock.calls.AddThing, callInfo)
	mock.lockAddThing.Unlock()
	return mock.AddThingFunc(ctx, b)
}

// AddThingCalls gets all the calls that were made to AddThing.
// Check the length with:
//
//	len(mockedThingsApp.AddThingCalls())
func (mock *ThingsAppMock) AddThingCalls() []struct {
	Ctx context.Context
	B   []byte
} {
	var calls []struct {
		Ctx context.Context
		B   []byte
	}
	mock.lockAddThing.RLock()
	calls = mock.calls.AddThing
	mock.lockAddThing.RUnlock()
	return calls
}

// AddValue calls AddValueFunc.
func (mock *ThingsAppMock) AddValue(ctx context.Context, t things.Thing, m things.Value) error {
	if mock.AddValueFunc == nil {
		panic("ThingsAppMock.AddValueFunc: method is nil but ThingsApp.AddValue was just called")
	}
	callInfo := struct {
		Ctx context.Context
		T   things.Thing
		M   things.Value
	}{
		Ctx: ctx,
		T:   t,
		M:   m,
	}
	mock.lockAddValue.Lock()
	mock.calls.AddValue = append(mock.calls.AddValue, callInfo)
	mock.lockAddValue.Unlock()
	return mock.AddValueFunc(ctx, t, m)
}

// AddValueCalls gets all the calls that were made to AddValue.
// Check the length with:
//
//	len(mockedThingsApp.AddValueCalls())
func (mock *ThingsAppMock) AddValueCalls() []struct {
	Ctx context.Context
	T   things.Thing
	M   things.Value
} {
	var calls []struct {
		Ctx context.Context
		T   things.Thing
		M   things.Value
	}
	mock.lockAddValue.RLock()
	calls = mock.calls.AddValue
	mock.lockAddValue.RUnlock()
	return calls
}

// GetConnectedThings calls GetConnectedThingsFunc.
func (mock *ThingsAppMock) GetConnectedThings(ctx context.Context, deviceID string) ([]things.Thing, error) {
	if mock.GetConnectedThingsFunc == nil {
		panic("ThingsAppMock.GetConnectedThingsFunc: method is nil but ThingsApp.GetConnectedThings was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
	}
	mock.lockGetConnectedThings.Lock()
	mock.calls.GetConnectedThings = append(mock.calls.GetConnectedThings, callInfo)
	mock.lockGetConnectedThings.Unlock()
	return mock.GetConnectedThingsFunc(ctx, deviceID)
}

// GetConnectedThingsCalls gets all the calls that were made to GetConnectedThings.
// Check the length with:
//
//	len(mockedThingsApp.GetConnectedThingsCalls())
func (mock *ThingsAppMock) GetConnectedThingsCalls() []struct {
	Ctx      context.Context
	DeviceID string
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
	}
	mock.lockGetConnectedThings.RLock()
	calls = mock.calls.GetConnectedThings
	mock.lockGetConnectedThings.RUnlock()
	return calls
}

// GetTags calls GetTagsFunc.
func (mock *ThingsAppMock) GetTags(ctx context.Context, tenants []string) ([]string, error) {
	if mock.GetTagsFunc == nil {
		panic("ThingsAppMock.GetTagsFunc: method is nil but ThingsApp.GetTags was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Tenants []string
	}{
		Ctx:     ctx,
		Tenants: tenants,
	}
	mock.lockGetTags.Lock()
	mock.calls.GetTags = append(mock.calls.GetTags, callInfo)
	mock.lockGetTags.Unlock()
	return mock.GetTagsFunc(ctx, tenants)
}

// GetTagsCalls gets all the calls that were made to GetTags.
// Check the length with:
//
//	len(mockedThingsApp.GetTagsCalls())
func (mock *ThingsAppMock) GetTagsCalls() []struct {
	Ctx     context.Context
	Tenants []string
} {
	var calls []struct {
		Ctx     context.Context
		Tenants []string
	}
	mock.lockGetTags.RLock()
	calls = mock.calls.GetTags
	mock.lockGetTags.RUnlock()
	return calls
}

// GetTypes calls GetTypesFunc.
func (mock *ThingsAppMock) GetTypes(ctx context.Context, tenants []string) ([]string, error) {
	if mock.GetTypesFunc == nil {
		panic("ThingsAppMock.GetTypesFunc: method is nil but ThingsApp.GetTypes was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Tenants []string
	}{
		Ctx:     ctx,
		Tenants: tenants,
	}
	mock.lockGetTypes.Lock()
	mock.calls.GetTypes = append(mock.calls.GetTypes, callInfo)
	mock.lockGetTypes.Unlock()
	return mock.GetTypesFunc(ctx, tenants)
}

// GetTypesCalls gets all the calls that were made to GetTypes.
// Check the length with:
//
//	len(mockedThingsApp.GetTypesCalls())
func (mock *ThingsAppMock) GetTypesCalls() []struct {
	Ctx     context.Context
	Tenants []string
} {
	var calls []struct {
		Ctx     context.Context
		Tenants []string
	}
	mock.lockGetTypes.RLock()
	calls = mock.calls.GetTypes
	mock.lockGetTypes.RUnlock()
	return calls
}

// MergeThing calls MergeThingFunc.
func (mock *ThingsAppMock) MergeThing(ctx context.Context, thingID string, b []byte, tenants []string) error {
	if mock.MergeThingFunc == nil {
		panic("ThingsAppMock.MergeThingFunc: method is nil but ThingsApp.MergeThing was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ThingID string
		B       []byte
		Tenants []string
	}{
		Ctx:     ctx,
		ThingID: thingID,
		B:       b,
		Tenants: tenants,
	}
	mock.lockMergeThing.Lock()
	mock.calls.MergeThing = append(mock.calls.MergeThing, callInfo)
	mock.lockMergeThing.Unlock()
	return mock.MergeThingFunc(ctx, thingID, b, tenants)
}

// MergeThingCalls gets all the calls that were made to MergeThing.
// Check the length with:
//
//	len(mockedThingsApp.MergeThingCalls())
func (mock *ThingsAppMock) MergeThingCalls() []struct {
	Ctx     context.Context
	ThingID string
	B       []byte
	Tenants []string
} {
	var calls []struct {
		Ctx     context.Context
		ThingID string
		B       []byte
		Tenants []string
	}
	mock.lockMergeThing.RLock()
	calls = mock.calls.MergeThing
	mock.lockMergeThing.RUnlock()
	return calls
}

// QueryThings calls QueryThingsFunc.
func (mock *ThingsAppMock) QueryThings(ctx context.Context, params map[string][]string) (QueryResult, error) {
	if mock.QueryThingsFunc == nil {
		panic("ThingsAppMock.QueryThingsFunc: method is nil but ThingsApp.QueryThings was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params map[string][]string
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockQueryThings.Lock()
	mock.calls.QueryThings = append(mock.calls.QueryThings, callInfo)
	mock.lockQueryThings.Unlock()
	return mock.QueryThingsFunc(ctx, params)
}

// QueryThingsCalls gets all the calls that were made to QueryThings.
// Check the length with:
//
//	len(mockedThingsApp.QueryThingsCalls())
func (mock *ThingsAppMock) QueryThingsCalls() []struct {
	Ctx    context.Context
	Params map[string][]string
} {
	var calls []struct {
		Ctx    context.Context
		Params map[string][]string
	}
	mock.lockQueryThings.RLock()
	calls = mock.calls.QueryThings
	mock.lockQueryThings.RUnlock()
	return calls
}

// SaveThing calls SaveThingFunc.
func (mock *ThingsAppMock) SaveThing(ctx context.Context, t things.Thing) error {
	if mock.SaveThingFunc == nil {
		panic("ThingsAppMock.SaveThingFunc: method is nil but ThingsApp.SaveThing was just called")
	}
	callInfo := struct {
		Ctx context.Context
		T   things.Thing
	}{
		Ctx: ctx,
		T:   t,
	}
	mock.lockSaveThing.Lock()
	mock.calls.SaveThing = append(mock.calls.SaveThing, callInfo)
	mock.lockSaveThing.Unlock()
	return mock.SaveThingFunc(ctx, t)
}

// SaveThingCalls gets all the calls that were made to SaveThing.
// Check the length with:
//
//	len(mockedThingsApp.SaveThingCalls())
func (mock *ThingsAppMock) SaveThingCalls() []struct {
	Ctx context.Context
	T   things.Thing
} {
	var calls []struct {
		Ctx context.Context
		T   things.Thing
	}
	mock.lockSaveThing.RLock()
	calls = mock.calls.SaveThing
	mock.lockSaveThing.RUnlock()
	return calls
}

// Seed calls SeedFunc.
func (mock *ThingsAppMock) Seed(ctx context.Context, r io.Reader) error {
	if mock.SeedFunc == nil {
		panic("ThingsAppMock.SeedFunc: method is nil but ThingsApp.Seed was just called")
	}
	callInfo := struct {
		Ctx context.Context
		R   io.Reader
	}{
		Ctx: ctx,
		R:   r,
	}
	mock.lockSeed.Lock()
	mock.calls.Seed = append(mock.calls.Seed, callInfo)
	mock.lockSeed.Unlock()
	return mock.SeedFunc(ctx, r)
}

// SeedCalls gets all the calls that were made to Seed.
// Check the length with:
//
//	len(mockedThingsApp.SeedCalls())
func (mock *ThingsAppMock) SeedCalls() []struct {
	Ctx context.Context
	R   io.Reader
} {
	var calls []struct {
		Ctx context.Context
		R   io.Reader
	}
	mock.lockSeed.RLock()
	calls = mock.calls.Seed
	mock.lockSeed.RUnlock()
	return calls
}

// UpdateThing calls UpdateThingFunc.
func (mock *ThingsAppMock) UpdateThing(ctx context.Context, b []byte, tenants []string) error {
	if mock.UpdateThingFunc == nil {
		panic("ThingsAppMock.UpdateThingFunc: method is nil but ThingsApp.UpdateThing was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		B       []byte
		Tenants []string
	}{
		Ctx:     ctx,
		B:       b,
		Tenants: tenants,
	}
	mock.lockUpdateThing.Lock()
	mock.calls.UpdateThing = append(mock.calls.UpdateThing, callInfo)
	mock.lockUpdateThing.Unlock()
	return mock.UpdateThingFunc(ctx, b, tenants)
}

// UpdateThingCalls gets all the calls that were made to UpdateThing.
// Check the length with:
//
//	len(mockedThingsApp.UpdateThingCalls())
func (mock *ThingsAppMock) UpdateThingCalls() []struct {
	Ctx     context.Context
	B       []byte
	Tenants []string
} {
	var calls []struct {
		Ctx     context.Context
		B       []byte
		Tenants []string
	}
	mock.lockUpdateThing.RLock()
	calls = mock.calls.UpdateThing
	mock.lockUpdateThing.RUnlock()
	return calls
}
