// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package app

import (
	"context"
	"sync"
)

// Ensure, that ThingsWriterMock does implement ThingsWriter.
// If this is not the case, regenerate this file with moq.
var _ ThingsWriter = &ThingsWriterMock{}

// ThingsWriterMock is a mock implementation of ThingsWriter.
//
//	func TestSomethingThatUsesThingsWriter(t *testing.T) {
//
//		// make and configure a mocked ThingsWriter
//		mockedThingsWriter := &ThingsWriterMock{
//			AddMeasurementFunc: func(ctx context.Context, t Thing, m Measurement) error {
//				panic("mock out the AddMeasurement method")
//			},
//			AddThingFunc: func(ctx context.Context, t Thing) error {
//				panic("mock out the AddThing method")
//			},
//			UpdateThingFunc: func(ctx context.Context, t Thing) error {
//				panic("mock out the UpdateThing method")
//			},
//		}
//
//		// use mockedThingsWriter in code that requires ThingsWriter
//		// and then make assertions.
//
//	}
type ThingsWriterMock struct {
	// AddMeasurementFunc mocks the AddMeasurement method.
	AddMeasurementFunc func(ctx context.Context, t Thing, m Measurement) error

	// AddThingFunc mocks the AddThing method.
	AddThingFunc func(ctx context.Context, t Thing) error

	// UpdateThingFunc mocks the UpdateThing method.
	UpdateThingFunc func(ctx context.Context, t Thing) error

	// calls tracks calls to the methods.
	calls struct {
		// AddMeasurement holds details about calls to the AddMeasurement method.
		AddMeasurement []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// T is the t argument value.
			T Thing
			// M is the m argument value.
			M Measurement
		}
		// AddThing holds details about calls to the AddThing method.
		AddThing []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// T is the t argument value.
			T Thing
		}
		// UpdateThing holds details about calls to the UpdateThing method.
		UpdateThing []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// T is the t argument value.
			T Thing
		}
	}
	lockAddMeasurement sync.RWMutex
	lockAddThing       sync.RWMutex
	lockUpdateThing    sync.RWMutex
}

// AddMeasurement calls AddMeasurementFunc.
func (mock *ThingsWriterMock) AddMeasurement(ctx context.Context, t Thing, m Measurement) error {
	if mock.AddMeasurementFunc == nil {
		panic("ThingsWriterMock.AddMeasurementFunc: method is nil but ThingsWriter.AddMeasurement was just called")
	}
	callInfo := struct {
		Ctx context.Context
		T   Thing
		M   Measurement
	}{
		Ctx: ctx,
		T:   t,
		M:   m,
	}
	mock.lockAddMeasurement.Lock()
	mock.calls.AddMeasurement = append(mock.calls.AddMeasurement, callInfo)
	mock.lockAddMeasurement.Unlock()
	return mock.AddMeasurementFunc(ctx, t, m)
}

// AddMeasurementCalls gets all the calls that were made to AddMeasurement.
// Check the length with:
//
//	len(mockedThingsWriter.AddMeasurementCalls())
func (mock *ThingsWriterMock) AddMeasurementCalls() []struct {
	Ctx context.Context
	T   Thing
	M   Measurement
} {
	var calls []struct {
		Ctx context.Context
		T   Thing
		M   Measurement
	}
	mock.lockAddMeasurement.RLock()
	calls = mock.calls.AddMeasurement
	mock.lockAddMeasurement.RUnlock()
	return calls
}

// AddThing calls AddThingFunc.
func (mock *ThingsWriterMock) AddThing(ctx context.Context, t Thing) error {
	if mock.AddThingFunc == nil {
		panic("ThingsWriterMock.AddThingFunc: method is nil but ThingsWriter.AddThing was just called")
	}
	callInfo := struct {
		Ctx context.Context
		T   Thing
	}{
		Ctx: ctx,
		T:   t,
	}
	mock.lockAddThing.Lock()
	mock.calls.AddThing = append(mock.calls.AddThing, callInfo)
	mock.lockAddThing.Unlock()
	return mock.AddThingFunc(ctx, t)
}

// AddThingCalls gets all the calls that were made to AddThing.
// Check the length with:
//
//	len(mockedThingsWriter.AddThingCalls())
func (mock *ThingsWriterMock) AddThingCalls() []struct {
	Ctx context.Context
	T   Thing
} {
	var calls []struct {
		Ctx context.Context
		T   Thing
	}
	mock.lockAddThing.RLock()
	calls = mock.calls.AddThing
	mock.lockAddThing.RUnlock()
	return calls
}

// UpdateThing calls UpdateThingFunc.
func (mock *ThingsWriterMock) UpdateThing(ctx context.Context, t Thing) error {
	if mock.UpdateThingFunc == nil {
		panic("ThingsWriterMock.UpdateThingFunc: method is nil but ThingsWriter.UpdateThing was just called")
	}
	callInfo := struct {
		Ctx context.Context
		T   Thing
	}{
		Ctx: ctx,
		T:   t,
	}
	mock.lockUpdateThing.Lock()
	mock.calls.UpdateThing = append(mock.calls.UpdateThing, callInfo)
	mock.lockUpdateThing.Unlock()
	return mock.UpdateThingFunc(ctx, t)
}

// UpdateThingCalls gets all the calls that were made to UpdateThing.
// Check the length with:
//
//	len(mockedThingsWriter.UpdateThingCalls())
func (mock *ThingsWriterMock) UpdateThingCalls() []struct {
	Ctx context.Context
	T   Thing
} {
	var calls []struct {
		Ctx context.Context
		T   Thing
	}
	mock.lockUpdateThing.RLock()
	calls = mock.calls.UpdateThing
	mock.lockUpdateThing.RUnlock()
	return calls
}
