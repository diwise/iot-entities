// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package things

import (
	"context"
	"sync"
)

// Ensure, that ThingsReaderMock does implement ThingsReader.
// If this is not the case, regenerate this file with moq.
var _ ThingsReader = &ThingsReaderMock{}

// ThingsReaderMock is a mock implementation of ThingsReader.
//
//	func TestSomethingThatUsesThingsReader(t *testing.T) {
//
//		// make and configure a mocked ThingsReader
//		mockedThingsReader := &ThingsReaderMock{
//			GetTagsFunc: func(ctx context.Context, tenants []string) ([]string, error) {
//				panic("mock out the GetTags method")
//			},
//			QueryThingsFunc: func(ctx context.Context, conditions ...ConditionFunc) (QueryResult, error) {
//				panic("mock out the QueryThings method")
//			},
//		}
//
//		// use mockedThingsReader in code that requires ThingsReader
//		// and then make assertions.
//
//	}
type ThingsReaderMock struct {
	// GetTagsFunc mocks the GetTags method.
	GetTagsFunc func(ctx context.Context, tenants []string) ([]string, error)

	// QueryThingsFunc mocks the QueryThings method.
	QueryThingsFunc func(ctx context.Context, conditions ...ConditionFunc) (QueryResult, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetTags holds details about calls to the GetTags method.
		GetTags []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// QueryThings holds details about calls to the QueryThings method.
		QueryThings []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Conditions is the conditions argument value.
			Conditions []ConditionFunc
		}
	}
	lockGetTags     sync.RWMutex
	lockQueryThings sync.RWMutex
}

// GetTags calls GetTagsFunc.
func (mock *ThingsReaderMock) GetTags(ctx context.Context, tenants []string) ([]string, error) {
	if mock.GetTagsFunc == nil {
		panic("ThingsReaderMock.GetTagsFunc: method is nil but ThingsReader.GetTags was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Tenants []string
	}{
		Ctx:     ctx,
		Tenants: tenants,
	}
	mock.lockGetTags.Lock()
	mock.calls.GetTags = append(mock.calls.GetTags, callInfo)
	mock.lockGetTags.Unlock()
	return mock.GetTagsFunc(ctx, tenants)
}

// GetTagsCalls gets all the calls that were made to GetTags.
// Check the length with:
//
//	len(mockedThingsReader.GetTagsCalls())
func (mock *ThingsReaderMock) GetTagsCalls() []struct {
	Ctx     context.Context
	Tenants []string
} {
	var calls []struct {
		Ctx     context.Context
		Tenants []string
	}
	mock.lockGetTags.RLock()
	calls = mock.calls.GetTags
	mock.lockGetTags.RUnlock()
	return calls
}

// QueryThings calls QueryThingsFunc.
func (mock *ThingsReaderMock) QueryThings(ctx context.Context, conditions ...ConditionFunc) (QueryResult, error) {
	if mock.QueryThingsFunc == nil {
		panic("ThingsReaderMock.QueryThingsFunc: method is nil but ThingsReader.QueryThings was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Conditions []ConditionFunc
	}{
		Ctx:        ctx,
		Conditions: conditions,
	}
	mock.lockQueryThings.Lock()
	mock.calls.QueryThings = append(mock.calls.QueryThings, callInfo)
	mock.lockQueryThings.Unlock()
	return mock.QueryThingsFunc(ctx, conditions...)
}

// QueryThingsCalls gets all the calls that were made to QueryThings.
// Check the length with:
//
//	len(mockedThingsReader.QueryThingsCalls())
func (mock *ThingsReaderMock) QueryThingsCalls() []struct {
	Ctx        context.Context
	Conditions []ConditionFunc
} {
	var calls []struct {
		Ctx        context.Context
		Conditions []ConditionFunc
	}
	mock.lockQueryThings.RLock()
	calls = mock.calls.QueryThings
	mock.lockQueryThings.RUnlock()
	return calls
}
