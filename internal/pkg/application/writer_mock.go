// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package application

import (
	"context"
	"sync"
)

// Ensure, that ThingWriterMock does implement ThingWriter.
// If this is not the case, regenerate this file with moq.
var _ ThingWriter = &ThingWriterMock{}

// ThingWriterMock is a mock implementation of ThingWriter.
//
//	func TestSomethingThatUsesThingWriter(t *testing.T) {
//
//		// make and configure a mocked ThingWriter
//		mockedThingWriter := &ThingWriterMock{
//			AddRelatedThingFunc: func(ctx context.Context, thingId string, v []byte) error {
//				panic("mock out the AddRelatedThing method")
//			},
//			CreateThingFunc: func(ctx context.Context, v []byte) error {
//				panic("mock out the CreateThing method")
//			},
//			UpdateThingFunc: func(ctx context.Context, v []byte) error {
//				panic("mock out the UpdateThing method")
//			},
//		}
//
//		// use mockedThingWriter in code that requires ThingWriter
//		// and then make assertions.
//
//	}
type ThingWriterMock struct {
	// AddRelatedThingFunc mocks the AddRelatedThing method.
	AddRelatedThingFunc func(ctx context.Context, thingId string, v []byte) error

	// CreateThingFunc mocks the CreateThing method.
	CreateThingFunc func(ctx context.Context, v []byte) error

	// UpdateThingFunc mocks the UpdateThing method.
	UpdateThingFunc func(ctx context.Context, v []byte) error

	// calls tracks calls to the methods.
	calls struct {
		// AddRelatedThing holds details about calls to the AddRelatedThing method.
		AddRelatedThing []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ThingId is the thingId argument value.
			ThingId string
			// V is the v argument value.
			V []byte
		}
		// CreateThing holds details about calls to the CreateThing method.
		CreateThing []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// V is the v argument value.
			V []byte
		}
		// UpdateThing holds details about calls to the UpdateThing method.
		UpdateThing []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// V is the v argument value.
			V []byte
		}
	}
	lockAddRelatedThing sync.RWMutex
	lockCreateThing     sync.RWMutex
	lockUpdateThing     sync.RWMutex
}

// AddRelatedThing calls AddRelatedThingFunc.
func (mock *ThingWriterMock) AddRelatedThing(ctx context.Context, thingId string, v []byte) error {
	if mock.AddRelatedThingFunc == nil {
		panic("ThingWriterMock.AddRelatedThingFunc: method is nil but ThingWriter.AddRelatedThing was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ThingId string
		V       []byte
	}{
		Ctx:     ctx,
		ThingId: thingId,
		V:       v,
	}
	mock.lockAddRelatedThing.Lock()
	mock.calls.AddRelatedThing = append(mock.calls.AddRelatedThing, callInfo)
	mock.lockAddRelatedThing.Unlock()
	return mock.AddRelatedThingFunc(ctx, thingId, v)
}

// AddRelatedThingCalls gets all the calls that were made to AddRelatedThing.
// Check the length with:
//
//	len(mockedThingWriter.AddRelatedThingCalls())
func (mock *ThingWriterMock) AddRelatedThingCalls() []struct {
	Ctx     context.Context
	ThingId string
	V       []byte
} {
	var calls []struct {
		Ctx     context.Context
		ThingId string
		V       []byte
	}
	mock.lockAddRelatedThing.RLock()
	calls = mock.calls.AddRelatedThing
	mock.lockAddRelatedThing.RUnlock()
	return calls
}

// CreateThing calls CreateThingFunc.
func (mock *ThingWriterMock) CreateThing(ctx context.Context, v []byte) error {
	if mock.CreateThingFunc == nil {
		panic("ThingWriterMock.CreateThingFunc: method is nil but ThingWriter.CreateThing was just called")
	}
	callInfo := struct {
		Ctx context.Context
		V   []byte
	}{
		Ctx: ctx,
		V:   v,
	}
	mock.lockCreateThing.Lock()
	mock.calls.CreateThing = append(mock.calls.CreateThing, callInfo)
	mock.lockCreateThing.Unlock()
	return mock.CreateThingFunc(ctx, v)
}

// CreateThingCalls gets all the calls that were made to CreateThing.
// Check the length with:
//
//	len(mockedThingWriter.CreateThingCalls())
func (mock *ThingWriterMock) CreateThingCalls() []struct {
	Ctx context.Context
	V   []byte
} {
	var calls []struct {
		Ctx context.Context
		V   []byte
	}
	mock.lockCreateThing.RLock()
	calls = mock.calls.CreateThing
	mock.lockCreateThing.RUnlock()
	return calls
}

// UpdateThing calls UpdateThingFunc.
func (mock *ThingWriterMock) UpdateThing(ctx context.Context, v []byte) error {
	if mock.UpdateThingFunc == nil {
		panic("ThingWriterMock.UpdateThingFunc: method is nil but ThingWriter.UpdateThing was just called")
	}
	callInfo := struct {
		Ctx context.Context
		V   []byte
	}{
		Ctx: ctx,
		V:   v,
	}
	mock.lockUpdateThing.Lock()
	mock.calls.UpdateThing = append(mock.calls.UpdateThing, callInfo)
	mock.lockUpdateThing.Unlock()
	return mock.UpdateThingFunc(ctx, v)
}

// UpdateThingCalls gets all the calls that were made to UpdateThing.
// Check the length with:
//
//	len(mockedThingWriter.UpdateThingCalls())
func (mock *ThingWriterMock) UpdateThingCalls() []struct {
	Ctx context.Context
	V   []byte
} {
	var calls []struct {
		Ctx context.Context
		V   []byte
	}
	mock.lockUpdateThing.RLock()
	calls = mock.calls.UpdateThing
	mock.lockUpdateThing.RUnlock()
	return calls
}
