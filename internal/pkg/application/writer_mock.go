// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package application

import (
	"context"
	"github.com/diwise/iot-things/internal/pkg/storage"
	"sync"
)

// Ensure, that ThingWriterMock does implement ThingWriter.
// If this is not the case, regenerate this file with moq.
var _ ThingWriter = &ThingWriterMock{}

// ThingWriterMock is a mock implementation of ThingWriter.
//
//	func TestSomethingThatUsesThingWriter(t *testing.T) {
//
//		// make and configure a mocked ThingWriter
//		mockedThingWriter := &ThingWriterMock{
//			AddRelatedThingFunc: func(ctx context.Context, v []byte, conditions ...storage.ConditionFunc) error {
//				panic("mock out the AddRelatedThing method")
//			},
//			CreateThingFunc: func(ctx context.Context, v []byte) error {
//				panic("mock out the CreateThing method")
//			},
//			DeleteRelatedThingFunc: func(ctx context.Context, thingID string, relatedID string, conditions ...storage.ConditionFunc) error {
//				panic("mock out the DeleteRelatedThing method")
//			},
//			UpdateThingFunc: func(ctx context.Context, v []byte) error {
//				panic("mock out the UpdateThing method")
//			},
//		}
//
//		// use mockedThingWriter in code that requires ThingWriter
//		// and then make assertions.
//
//	}
type ThingWriterMock struct {
	// AddRelatedThingFunc mocks the AddRelatedThing method.
	AddRelatedThingFunc func(ctx context.Context, v []byte, conditions ...storage.ConditionFunc) error

	// CreateThingFunc mocks the CreateThing method.
	CreateThingFunc func(ctx context.Context, v []byte) error

	// DeleteRelatedThingFunc mocks the DeleteRelatedThing method.
	DeleteRelatedThingFunc func(ctx context.Context, thingID string, relatedID string, conditions ...storage.ConditionFunc) error

	// UpdateThingFunc mocks the UpdateThing method.
	UpdateThingFunc func(ctx context.Context, v []byte) error

	// calls tracks calls to the methods.
	calls struct {
		// AddRelatedThing holds details about calls to the AddRelatedThing method.
		AddRelatedThing []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// V is the v argument value.
			V []byte
			// Conditions is the conditions argument value.
			Conditions []storage.ConditionFunc
		}
		// CreateThing holds details about calls to the CreateThing method.
		CreateThing []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// V is the v argument value.
			V []byte
		}
		// DeleteRelatedThing holds details about calls to the DeleteRelatedThing method.
		DeleteRelatedThing []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ThingID is the thingID argument value.
			ThingID string
			// RelatedID is the relatedID argument value.
			RelatedID string
			// Conditions is the conditions argument value.
			Conditions []storage.ConditionFunc
		}
		// UpdateThing holds details about calls to the UpdateThing method.
		UpdateThing []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// V is the v argument value.
			V []byte
		}
	}
	lockAddRelatedThing    sync.RWMutex
	lockCreateThing        sync.RWMutex
	lockDeleteRelatedThing sync.RWMutex
	lockUpdateThing        sync.RWMutex
}

// AddRelatedThing calls AddRelatedThingFunc.
func (mock *ThingWriterMock) AddRelatedThing(ctx context.Context, v []byte, conditions ...storage.ConditionFunc) error {
	if mock.AddRelatedThingFunc == nil {
		panic("ThingWriterMock.AddRelatedThingFunc: method is nil but ThingWriter.AddRelatedThing was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		V          []byte
		Conditions []storage.ConditionFunc
	}{
		Ctx:        ctx,
		V:          v,
		Conditions: conditions,
	}
	mock.lockAddRelatedThing.Lock()
	mock.calls.AddRelatedThing = append(mock.calls.AddRelatedThing, callInfo)
	mock.lockAddRelatedThing.Unlock()
	return mock.AddRelatedThingFunc(ctx, v, conditions...)
}

// AddRelatedThingCalls gets all the calls that were made to AddRelatedThing.
// Check the length with:
//
//	len(mockedThingWriter.AddRelatedThingCalls())
func (mock *ThingWriterMock) AddRelatedThingCalls() []struct {
	Ctx        context.Context
	V          []byte
	Conditions []storage.ConditionFunc
} {
	var calls []struct {
		Ctx        context.Context
		V          []byte
		Conditions []storage.ConditionFunc
	}
	mock.lockAddRelatedThing.RLock()
	calls = mock.calls.AddRelatedThing
	mock.lockAddRelatedThing.RUnlock()
	return calls
}

// CreateThing calls CreateThingFunc.
func (mock *ThingWriterMock) CreateThing(ctx context.Context, v []byte) error {
	if mock.CreateThingFunc == nil {
		panic("ThingWriterMock.CreateThingFunc: method is nil but ThingWriter.CreateThing was just called")
	}
	callInfo := struct {
		Ctx context.Context
		V   []byte
	}{
		Ctx: ctx,
		V:   v,
	}
	mock.lockCreateThing.Lock()
	mock.calls.CreateThing = append(mock.calls.CreateThing, callInfo)
	mock.lockCreateThing.Unlock()
	return mock.CreateThingFunc(ctx, v)
}

// CreateThingCalls gets all the calls that were made to CreateThing.
// Check the length with:
//
//	len(mockedThingWriter.CreateThingCalls())
func (mock *ThingWriterMock) CreateThingCalls() []struct {
	Ctx context.Context
	V   []byte
} {
	var calls []struct {
		Ctx context.Context
		V   []byte
	}
	mock.lockCreateThing.RLock()
	calls = mock.calls.CreateThing
	mock.lockCreateThing.RUnlock()
	return calls
}

// DeleteRelatedThing calls DeleteRelatedThingFunc.
func (mock *ThingWriterMock) DeleteRelatedThing(ctx context.Context, thingID string, relatedID string, conditions ...storage.ConditionFunc) error {
	if mock.DeleteRelatedThingFunc == nil {
		panic("ThingWriterMock.DeleteRelatedThingFunc: method is nil but ThingWriter.DeleteRelatedThing was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ThingID    string
		RelatedID  string
		Conditions []storage.ConditionFunc
	}{
		Ctx:        ctx,
		ThingID:    thingID,
		RelatedID:  relatedID,
		Conditions: conditions,
	}
	mock.lockDeleteRelatedThing.Lock()
	mock.calls.DeleteRelatedThing = append(mock.calls.DeleteRelatedThing, callInfo)
	mock.lockDeleteRelatedThing.Unlock()
	return mock.DeleteRelatedThingFunc(ctx, thingID, relatedID, conditions...)
}

// DeleteRelatedThingCalls gets all the calls that were made to DeleteRelatedThing.
// Check the length with:
//
//	len(mockedThingWriter.DeleteRelatedThingCalls())
func (mock *ThingWriterMock) DeleteRelatedThingCalls() []struct {
	Ctx        context.Context
	ThingID    string
	RelatedID  string
	Conditions []storage.ConditionFunc
} {
	var calls []struct {
		Ctx        context.Context
		ThingID    string
		RelatedID  string
		Conditions []storage.ConditionFunc
	}
	mock.lockDeleteRelatedThing.RLock()
	calls = mock.calls.DeleteRelatedThing
	mock.lockDeleteRelatedThing.RUnlock()
	return calls
}

// UpdateThing calls UpdateThingFunc.
func (mock *ThingWriterMock) UpdateThing(ctx context.Context, v []byte) error {
	if mock.UpdateThingFunc == nil {
		panic("ThingWriterMock.UpdateThingFunc: method is nil but ThingWriter.UpdateThing was just called")
	}
	callInfo := struct {
		Ctx context.Context
		V   []byte
	}{
		Ctx: ctx,
		V:   v,
	}
	mock.lockUpdateThing.Lock()
	mock.calls.UpdateThing = append(mock.calls.UpdateThing, callInfo)
	mock.lockUpdateThing.Unlock()
	return mock.UpdateThingFunc(ctx, v)
}

// UpdateThingCalls gets all the calls that were made to UpdateThing.
// Check the length with:
//
//	len(mockedThingWriter.UpdateThingCalls())
func (mock *ThingWriterMock) UpdateThingCalls() []struct {
	Ctx context.Context
	V   []byte
} {
	var calls []struct {
		Ctx context.Context
		V   []byte
	}
	mock.lockUpdateThing.RLock()
	calls = mock.calls.UpdateThing
	mock.lockUpdateThing.RUnlock()
	return calls
}
