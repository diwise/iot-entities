// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package application

import (
	"context"
	"github.com/diwise/iot-entities/internal/pkg/storage"
	"sync"
)

// Ensure, that StorageMock does implement Storage.
// If this is not the case, regenerate this file with moq.
var _ Storage = &StorageMock{}

// StorageMock is a mock implementation of Storage.
//
//	func TestSomethingThatUsesStorage(t *testing.T) {
//
//		// make and configure a mocked Storage
//		mockedStorage := &StorageMock{
//			AddRelatedEntityFunc: func(ctx context.Context, entityId string, v []byte) error {
//				panic("mock out the AddRelatedEntity method")
//			},
//			CreateEntityFunc: func(ctx context.Context, v []byte) error {
//				panic("mock out the CreateEntity method")
//			},
//			QueryEntitiesFunc: func(ctx context.Context, conditions ...storage.ConditionFunc) ([]byte, error) {
//				panic("mock out the QueryEntities method")
//			},
//			RetrieveEntityFunc: func(ctx context.Context, entityId string) ([]byte, string, error) {
//				panic("mock out the RetrieveEntity method")
//			},
//			RetrieveRelatedEntitiesFunc: func(ctx context.Context, entityId string) ([]byte, error) {
//				panic("mock out the RetrieveRelatedEntities method")
//			},
//			UpdateEntityFunc: func(ctx context.Context, v []byte) error {
//				panic("mock out the UpdateEntity method")
//			},
//		}
//
//		// use mockedStorage in code that requires Storage
//		// and then make assertions.
//
//	}
type StorageMock struct {
	// AddRelatedEntityFunc mocks the AddRelatedEntity method.
	AddRelatedEntityFunc func(ctx context.Context, entityId string, v []byte) error

	// CreateEntityFunc mocks the CreateEntity method.
	CreateEntityFunc func(ctx context.Context, v []byte) error

	// QueryEntitiesFunc mocks the QueryEntities method.
	QueryEntitiesFunc func(ctx context.Context, conditions ...storage.ConditionFunc) ([]byte, error)

	// RetrieveEntityFunc mocks the RetrieveEntity method.
	RetrieveEntityFunc func(ctx context.Context, entityId string) ([]byte, string, error)

	// RetrieveRelatedEntitiesFunc mocks the RetrieveRelatedEntities method.
	RetrieveRelatedEntitiesFunc func(ctx context.Context, entityId string) ([]byte, error)

	// UpdateEntityFunc mocks the UpdateEntity method.
	UpdateEntityFunc func(ctx context.Context, v []byte) error

	// calls tracks calls to the methods.
	calls struct {
		// AddRelatedEntity holds details about calls to the AddRelatedEntity method.
		AddRelatedEntity []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EntityId is the entityId argument value.
			EntityId string
			// V is the v argument value.
			V []byte
		}
		// CreateEntity holds details about calls to the CreateEntity method.
		CreateEntity []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// V is the v argument value.
			V []byte
		}
		// QueryEntities holds details about calls to the QueryEntities method.
		QueryEntities []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Conditions is the conditions argument value.
			Conditions []storage.ConditionFunc
		}
		// RetrieveEntity holds details about calls to the RetrieveEntity method.
		RetrieveEntity []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EntityId is the entityId argument value.
			EntityId string
		}
		// RetrieveRelatedEntities holds details about calls to the RetrieveRelatedEntities method.
		RetrieveRelatedEntities []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EntityId is the entityId argument value.
			EntityId string
		}
		// UpdateEntity holds details about calls to the UpdateEntity method.
		UpdateEntity []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// V is the v argument value.
			V []byte
		}
	}
	lockAddRelatedEntity        sync.RWMutex
	lockCreateEntity            sync.RWMutex
	lockQueryEntities           sync.RWMutex
	lockRetrieveEntity          sync.RWMutex
	lockRetrieveRelatedEntities sync.RWMutex
	lockUpdateEntity            sync.RWMutex
}

// AddRelatedEntity calls AddRelatedEntityFunc.
func (mock *StorageMock) AddRelatedEntity(ctx context.Context, entityId string, v []byte) error {
	if mock.AddRelatedEntityFunc == nil {
		panic("StorageMock.AddRelatedEntityFunc: method is nil but Storage.AddRelatedEntity was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		EntityId string
		V        []byte
	}{
		Ctx:      ctx,
		EntityId: entityId,
		V:        v,
	}
	mock.lockAddRelatedEntity.Lock()
	mock.calls.AddRelatedEntity = append(mock.calls.AddRelatedEntity, callInfo)
	mock.lockAddRelatedEntity.Unlock()
	return mock.AddRelatedEntityFunc(ctx, entityId, v)
}

// AddRelatedEntityCalls gets all the calls that were made to AddRelatedEntity.
// Check the length with:
//
//	len(mockedStorage.AddRelatedEntityCalls())
func (mock *StorageMock) AddRelatedEntityCalls() []struct {
	Ctx      context.Context
	EntityId string
	V        []byte
} {
	var calls []struct {
		Ctx      context.Context
		EntityId string
		V        []byte
	}
	mock.lockAddRelatedEntity.RLock()
	calls = mock.calls.AddRelatedEntity
	mock.lockAddRelatedEntity.RUnlock()
	return calls
}

// CreateEntity calls CreateEntityFunc.
func (mock *StorageMock) CreateEntity(ctx context.Context, v []byte) error {
	if mock.CreateEntityFunc == nil {
		panic("StorageMock.CreateEntityFunc: method is nil but Storage.CreateEntity was just called")
	}
	callInfo := struct {
		Ctx context.Context
		V   []byte
	}{
		Ctx: ctx,
		V:   v,
	}
	mock.lockCreateEntity.Lock()
	mock.calls.CreateEntity = append(mock.calls.CreateEntity, callInfo)
	mock.lockCreateEntity.Unlock()
	return mock.CreateEntityFunc(ctx, v)
}

// CreateEntityCalls gets all the calls that were made to CreateEntity.
// Check the length with:
//
//	len(mockedStorage.CreateEntityCalls())
func (mock *StorageMock) CreateEntityCalls() []struct {
	Ctx context.Context
	V   []byte
} {
	var calls []struct {
		Ctx context.Context
		V   []byte
	}
	mock.lockCreateEntity.RLock()
	calls = mock.calls.CreateEntity
	mock.lockCreateEntity.RUnlock()
	return calls
}

// QueryEntities calls QueryEntitiesFunc.
func (mock *StorageMock) QueryEntities(ctx context.Context, conditions ...storage.ConditionFunc) ([]byte, error) {
	if mock.QueryEntitiesFunc == nil {
		panic("StorageMock.QueryEntitiesFunc: method is nil but Storage.QueryEntities was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Conditions []storage.ConditionFunc
	}{
		Ctx:        ctx,
		Conditions: conditions,
	}
	mock.lockQueryEntities.Lock()
	mock.calls.QueryEntities = append(mock.calls.QueryEntities, callInfo)
	mock.lockQueryEntities.Unlock()
	return mock.QueryEntitiesFunc(ctx, conditions...)
}

// QueryEntitiesCalls gets all the calls that were made to QueryEntities.
// Check the length with:
//
//	len(mockedStorage.QueryEntitiesCalls())
func (mock *StorageMock) QueryEntitiesCalls() []struct {
	Ctx        context.Context
	Conditions []storage.ConditionFunc
} {
	var calls []struct {
		Ctx        context.Context
		Conditions []storage.ConditionFunc
	}
	mock.lockQueryEntities.RLock()
	calls = mock.calls.QueryEntities
	mock.lockQueryEntities.RUnlock()
	return calls
}

// RetrieveEntity calls RetrieveEntityFunc.
func (mock *StorageMock) RetrieveEntity(ctx context.Context, entityId string) ([]byte, string, error) {
	if mock.RetrieveEntityFunc == nil {
		panic("StorageMock.RetrieveEntityFunc: method is nil but Storage.RetrieveEntity was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		EntityId string
	}{
		Ctx:      ctx,
		EntityId: entityId,
	}
	mock.lockRetrieveEntity.Lock()
	mock.calls.RetrieveEntity = append(mock.calls.RetrieveEntity, callInfo)
	mock.lockRetrieveEntity.Unlock()
	return mock.RetrieveEntityFunc(ctx, entityId)
}

// RetrieveEntityCalls gets all the calls that were made to RetrieveEntity.
// Check the length with:
//
//	len(mockedStorage.RetrieveEntityCalls())
func (mock *StorageMock) RetrieveEntityCalls() []struct {
	Ctx      context.Context
	EntityId string
} {
	var calls []struct {
		Ctx      context.Context
		EntityId string
	}
	mock.lockRetrieveEntity.RLock()
	calls = mock.calls.RetrieveEntity
	mock.lockRetrieveEntity.RUnlock()
	return calls
}

// RetrieveRelatedEntities calls RetrieveRelatedEntitiesFunc.
func (mock *StorageMock) RetrieveRelatedEntities(ctx context.Context, entityId string) ([]byte, error) {
	if mock.RetrieveRelatedEntitiesFunc == nil {
		panic("StorageMock.RetrieveRelatedEntitiesFunc: method is nil but Storage.RetrieveRelatedEntities was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		EntityId string
	}{
		Ctx:      ctx,
		EntityId: entityId,
	}
	mock.lockRetrieveRelatedEntities.Lock()
	mock.calls.RetrieveRelatedEntities = append(mock.calls.RetrieveRelatedEntities, callInfo)
	mock.lockRetrieveRelatedEntities.Unlock()
	return mock.RetrieveRelatedEntitiesFunc(ctx, entityId)
}

// RetrieveRelatedEntitiesCalls gets all the calls that were made to RetrieveRelatedEntities.
// Check the length with:
//
//	len(mockedStorage.RetrieveRelatedEntitiesCalls())
func (mock *StorageMock) RetrieveRelatedEntitiesCalls() []struct {
	Ctx      context.Context
	EntityId string
} {
	var calls []struct {
		Ctx      context.Context
		EntityId string
	}
	mock.lockRetrieveRelatedEntities.RLock()
	calls = mock.calls.RetrieveRelatedEntities
	mock.lockRetrieveRelatedEntities.RUnlock()
	return calls
}

// UpdateEntity calls UpdateEntityFunc.
func (mock *StorageMock) UpdateEntity(ctx context.Context, v []byte) error {
	if mock.UpdateEntityFunc == nil {
		panic("StorageMock.UpdateEntityFunc: method is nil but Storage.UpdateEntity was just called")
	}
	callInfo := struct {
		Ctx context.Context
		V   []byte
	}{
		Ctx: ctx,
		V:   v,
	}
	mock.lockUpdateEntity.Lock()
	mock.calls.UpdateEntity = append(mock.calls.UpdateEntity, callInfo)
	mock.lockUpdateEntity.Unlock()
	return mock.UpdateEntityFunc(ctx, v)
}

// UpdateEntityCalls gets all the calls that were made to UpdateEntity.
// Check the length with:
//
//	len(mockedStorage.UpdateEntityCalls())
func (mock *StorageMock) UpdateEntityCalls() []struct {
	Ctx context.Context
	V   []byte
} {
	var calls []struct {
		Ctx context.Context
		V   []byte
	}
	mock.lockUpdateEntity.RLock()
	calls = mock.calls.UpdateEntity
	mock.lockUpdateEntity.RUnlock()
	return calls
}
