// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package application

import (
	"context"
	"github.com/diwise/iot-things/internal/pkg/storage"
	"sync"
)

// Ensure, that StorageMock does implement Storage.
// If this is not the case, regenerate this file with moq.
var _ Storage = &StorageMock{}

// StorageMock is a mock implementation of Storage.
//
//	func TestSomethingThatUsesStorage(t *testing.T) {
//
//		// make and configure a mocked Storage
//		mockedStorage := &StorageMock{
//			AddRelatedThingFunc: func(ctx context.Context, thingId string, v []byte) error {
//				panic("mock out the AddRelatedThing method")
//			},
//			CreateThingFunc: func(ctx context.Context, v []byte) error {
//				panic("mock out the CreateThing method")
//			},
//			QueryThingsFunc: func(ctx context.Context, conditions ...storage.ConditionFunc) ([]byte, error) {
//				panic("mock out the QueryThings method")
//			},
//			RetrieveRelatedThingsFunc: func(ctx context.Context, thingId string) ([]byte, error) {
//				panic("mock out the RetrieveRelatedThings method")
//			},
//			RetrieveThingFunc: func(ctx context.Context, thingId string) ([]byte, string, error) {
//				panic("mock out the RetrieveThing method")
//			},
//			UpdateThingFunc: func(ctx context.Context, v []byte) error {
//				panic("mock out the UpdateThing method")
//			},
//		}
//
//		// use mockedStorage in code that requires Storage
//		// and then make assertions.
//
//	}
type StorageMock struct {
	// AddRelatedThingFunc mocks the AddRelatedThing method.
	AddRelatedThingFunc func(ctx context.Context, thingId string, v []byte) error

	// CreateThingFunc mocks the CreateThing method.
	CreateThingFunc func(ctx context.Context, v []byte) error

	// QueryThingsFunc mocks the QueryThings method.
	QueryThingsFunc func(ctx context.Context, conditions ...storage.ConditionFunc) ([]byte, error)

	// RetrieveRelatedThingsFunc mocks the RetrieveRelatedThings method.
	RetrieveRelatedThingsFunc func(ctx context.Context, thingId string) ([]byte, error)

	// RetrieveThingFunc mocks the RetrieveThing method.
	RetrieveThingFunc func(ctx context.Context, thingId string) ([]byte, string, error)

	// UpdateThingFunc mocks the UpdateThing method.
	UpdateThingFunc func(ctx context.Context, v []byte) error

	// calls tracks calls to the methods.
	calls struct {
		// AddRelatedThing holds details about calls to the AddRelatedThing method.
		AddRelatedThing []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ThingId is the thingId argument value.
			ThingId string
			// V is the v argument value.
			V []byte
		}
		// CreateThing holds details about calls to the CreateThing method.
		CreateThing []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// V is the v argument value.
			V []byte
		}
		// QueryThings holds details about calls to the QueryThings method.
		QueryThings []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Conditions is the conditions argument value.
			Conditions []storage.ConditionFunc
		}
		// RetrieveRelatedThings holds details about calls to the RetrieveRelatedThings method.
		RetrieveRelatedThings []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ThingId is the thingId argument value.
			ThingId string
		}
		// RetrieveThing holds details about calls to the RetrieveThing method.
		RetrieveThing []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ThingId is the thingId argument value.
			ThingId string
		}
		// UpdateThing holds details about calls to the UpdateThing method.
		UpdateThing []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// V is the v argument value.
			V []byte
		}
	}
	lockAddRelatedThing       sync.RWMutex
	lockCreateThing           sync.RWMutex
	lockQueryThings           sync.RWMutex
	lockRetrieveRelatedThings sync.RWMutex
	lockRetrieveThing         sync.RWMutex
	lockUpdateThing           sync.RWMutex
}

// AddRelatedThing calls AddRelatedThingFunc.
func (mock *StorageMock) AddRelatedThing(ctx context.Context, thingId string, v []byte) error {
	if mock.AddRelatedThingFunc == nil {
		panic("StorageMock.AddRelatedThingFunc: method is nil but Storage.AddRelatedThing was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ThingId string
		V       []byte
	}{
		Ctx:     ctx,
		ThingId: thingId,
		V:       v,
	}
	mock.lockAddRelatedThing.Lock()
	mock.calls.AddRelatedThing = append(mock.calls.AddRelatedThing, callInfo)
	mock.lockAddRelatedThing.Unlock()
	return mock.AddRelatedThingFunc(ctx, thingId, v)
}

// AddRelatedThingCalls gets all the calls that were made to AddRelatedThing.
// Check the length with:
//
//	len(mockedStorage.AddRelatedThingCalls())
func (mock *StorageMock) AddRelatedThingCalls() []struct {
	Ctx     context.Context
	ThingId string
	V       []byte
} {
	var calls []struct {
		Ctx     context.Context
		ThingId string
		V       []byte
	}
	mock.lockAddRelatedThing.RLock()
	calls = mock.calls.AddRelatedThing
	mock.lockAddRelatedThing.RUnlock()
	return calls
}

// CreateThing calls CreateThingFunc.
func (mock *StorageMock) CreateThing(ctx context.Context, v []byte) error {
	if mock.CreateThingFunc == nil {
		panic("StorageMock.CreateThingFunc: method is nil but Storage.CreateThing was just called")
	}
	callInfo := struct {
		Ctx context.Context
		V   []byte
	}{
		Ctx: ctx,
		V:   v,
	}
	mock.lockCreateThing.Lock()
	mock.calls.CreateThing = append(mock.calls.CreateThing, callInfo)
	mock.lockCreateThing.Unlock()
	return mock.CreateThingFunc(ctx, v)
}

// CreateThingCalls gets all the calls that were made to CreateThing.
// Check the length with:
//
//	len(mockedStorage.CreateThingCalls())
func (mock *StorageMock) CreateThingCalls() []struct {
	Ctx context.Context
	V   []byte
} {
	var calls []struct {
		Ctx context.Context
		V   []byte
	}
	mock.lockCreateThing.RLock()
	calls = mock.calls.CreateThing
	mock.lockCreateThing.RUnlock()
	return calls
}

// QueryThings calls QueryThingsFunc.
func (mock *StorageMock) QueryThings(ctx context.Context, conditions ...storage.ConditionFunc) ([]byte, error) {
	if mock.QueryThingsFunc == nil {
		panic("StorageMock.QueryThingsFunc: method is nil but Storage.QueryThings was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Conditions []storage.ConditionFunc
	}{
		Ctx:        ctx,
		Conditions: conditions,
	}
	mock.lockQueryThings.Lock()
	mock.calls.QueryThings = append(mock.calls.QueryThings, callInfo)
	mock.lockQueryThings.Unlock()
	return mock.QueryThingsFunc(ctx, conditions...)
}

// QueryThingsCalls gets all the calls that were made to QueryThings.
// Check the length with:
//
//	len(mockedStorage.QueryThingsCalls())
func (mock *StorageMock) QueryThingsCalls() []struct {
	Ctx        context.Context
	Conditions []storage.ConditionFunc
} {
	var calls []struct {
		Ctx        context.Context
		Conditions []storage.ConditionFunc
	}
	mock.lockQueryThings.RLock()
	calls = mock.calls.QueryThings
	mock.lockQueryThings.RUnlock()
	return calls
}

// RetrieveRelatedThings calls RetrieveRelatedThingsFunc.
func (mock *StorageMock) RetrieveRelatedThings(ctx context.Context, thingId string) ([]byte, error) {
	if mock.RetrieveRelatedThingsFunc == nil {
		panic("StorageMock.RetrieveRelatedThingsFunc: method is nil but Storage.RetrieveRelatedThings was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ThingId string
	}{
		Ctx:     ctx,
		ThingId: thingId,
	}
	mock.lockRetrieveRelatedThings.Lock()
	mock.calls.RetrieveRelatedThings = append(mock.calls.RetrieveRelatedThings, callInfo)
	mock.lockRetrieveRelatedThings.Unlock()
	return mock.RetrieveRelatedThingsFunc(ctx, thingId)
}

// RetrieveRelatedThingsCalls gets all the calls that were made to RetrieveRelatedThings.
// Check the length with:
//
//	len(mockedStorage.RetrieveRelatedThingsCalls())
func (mock *StorageMock) RetrieveRelatedThingsCalls() []struct {
	Ctx     context.Context
	ThingId string
} {
	var calls []struct {
		Ctx     context.Context
		ThingId string
	}
	mock.lockRetrieveRelatedThings.RLock()
	calls = mock.calls.RetrieveRelatedThings
	mock.lockRetrieveRelatedThings.RUnlock()
	return calls
}

// RetrieveThing calls RetrieveThingFunc.
func (mock *StorageMock) RetrieveThing(ctx context.Context, thingId string) ([]byte, string, error) {
	if mock.RetrieveThingFunc == nil {
		panic("StorageMock.RetrieveThingFunc: method is nil but Storage.RetrieveThing was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ThingId string
	}{
		Ctx:     ctx,
		ThingId: thingId,
	}
	mock.lockRetrieveThing.Lock()
	mock.calls.RetrieveThing = append(mock.calls.RetrieveThing, callInfo)
	mock.lockRetrieveThing.Unlock()
	return mock.RetrieveThingFunc(ctx, thingId)
}

// RetrieveThingCalls gets all the calls that were made to RetrieveThing.
// Check the length with:
//
//	len(mockedStorage.RetrieveThingCalls())
func (mock *StorageMock) RetrieveThingCalls() []struct {
	Ctx     context.Context
	ThingId string
} {
	var calls []struct {
		Ctx     context.Context
		ThingId string
	}
	mock.lockRetrieveThing.RLock()
	calls = mock.calls.RetrieveThing
	mock.lockRetrieveThing.RUnlock()
	return calls
}

// UpdateThing calls UpdateThingFunc.
func (mock *StorageMock) UpdateThing(ctx context.Context, v []byte) error {
	if mock.UpdateThingFunc == nil {
		panic("StorageMock.UpdateThingFunc: method is nil but Storage.UpdateThing was just called")
	}
	callInfo := struct {
		Ctx context.Context
		V   []byte
	}{
		Ctx: ctx,
		V:   v,
	}
	mock.lockUpdateThing.Lock()
	mock.calls.UpdateThing = append(mock.calls.UpdateThing, callInfo)
	mock.lockUpdateThing.Unlock()
	return mock.UpdateThingFunc(ctx, v)
}

// UpdateThingCalls gets all the calls that were made to UpdateThing.
// Check the length with:
//
//	len(mockedStorage.UpdateThingCalls())
func (mock *StorageMock) UpdateThingCalls() []struct {
	Ctx context.Context
	V   []byte
} {
	var calls []struct {
		Ctx context.Context
		V   []byte
	}
	mock.lockUpdateThing.RLock()
	calls = mock.calls.UpdateThing
	mock.lockUpdateThing.RUnlock()
	return calls
}
