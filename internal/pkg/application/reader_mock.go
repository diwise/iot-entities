// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package application

import (
	"context"
	"github.com/diwise/iot-things/internal/pkg/storage"
	"sync"
)

// Ensure, that ThingReaderMock does implement ThingReader.
// If this is not the case, regenerate this file with moq.
var _ ThingReader = &ThingReaderMock{}

// ThingReaderMock is a mock implementation of ThingReader.
//
//	func TestSomethingThatUsesThingReader(t *testing.T) {
//
//		// make and configure a mocked ThingReader
//		mockedThingReader := &ThingReaderMock{
//			GetTagsFunc: func(ctx context.Context, tenants []string) ([]string, error) {
//				panic("mock out the GetTags method")
//			},
//			GetTypesFunc: func(ctx context.Context, tenants []string) ([]string, error) {
//				panic("mock out the GetTypes method")
//			},
//			QueryThingsFunc: func(ctx context.Context, conditions ...storage.ConditionFunc) (storage.QueryResult, error) {
//				panic("mock out the QueryThings method")
//			},
//			RetrieveRelatedThingsFunc: func(ctx context.Context, conditions ...storage.ConditionFunc) ([]byte, error) {
//				panic("mock out the RetrieveRelatedThings method")
//			},
//			RetrieveThingFunc: func(ctx context.Context, conditions ...storage.ConditionFunc) ([]byte, string, error) {
//				panic("mock out the RetrieveThing method")
//			},
//		}
//
//		// use mockedThingReader in code that requires ThingReader
//		// and then make assertions.
//
//	}
type ThingReaderMock struct {
	// GetTagsFunc mocks the GetTags method.
	GetTagsFunc func(ctx context.Context, tenants []string) ([]string, error)

	// GetTypesFunc mocks the GetTypes method.
	GetTypesFunc func(ctx context.Context, tenants []string) ([]string, error)

	// QueryThingsFunc mocks the QueryThings method.
	QueryThingsFunc func(ctx context.Context, conditions ...storage.ConditionFunc) (storage.QueryResult, error)

	// RetrieveRelatedThingsFunc mocks the RetrieveRelatedThings method.
	RetrieveRelatedThingsFunc func(ctx context.Context, conditions ...storage.ConditionFunc) ([]byte, error)

	// RetrieveThingFunc mocks the RetrieveThing method.
	RetrieveThingFunc func(ctx context.Context, conditions ...storage.ConditionFunc) ([]byte, string, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetTags holds details about calls to the GetTags method.
		GetTags []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// GetTypes holds details about calls to the GetTypes method.
		GetTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// QueryThings holds details about calls to the QueryThings method.
		QueryThings []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Conditions is the conditions argument value.
			Conditions []storage.ConditionFunc
		}
		// RetrieveRelatedThings holds details about calls to the RetrieveRelatedThings method.
		RetrieveRelatedThings []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Conditions is the conditions argument value.
			Conditions []storage.ConditionFunc
		}
		// RetrieveThing holds details about calls to the RetrieveThing method.
		RetrieveThing []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Conditions is the conditions argument value.
			Conditions []storage.ConditionFunc
		}
	}
	lockGetTags               sync.RWMutex
	lockGetTypes              sync.RWMutex
	lockQueryThings           sync.RWMutex
	lockRetrieveRelatedThings sync.RWMutex
	lockRetrieveThing         sync.RWMutex
}

// GetTags calls GetTagsFunc.
func (mock *ThingReaderMock) GetTags(ctx context.Context, tenants []string) ([]string, error) {
	if mock.GetTagsFunc == nil {
		panic("ThingReaderMock.GetTagsFunc: method is nil but ThingReader.GetTags was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Tenants []string
	}{
		Ctx:     ctx,
		Tenants: tenants,
	}
	mock.lockGetTags.Lock()
	mock.calls.GetTags = append(mock.calls.GetTags, callInfo)
	mock.lockGetTags.Unlock()
	return mock.GetTagsFunc(ctx, tenants)
}

// GetTagsCalls gets all the calls that were made to GetTags.
// Check the length with:
//
//	len(mockedThingReader.GetTagsCalls())
func (mock *ThingReaderMock) GetTagsCalls() []struct {
	Ctx     context.Context
	Tenants []string
} {
	var calls []struct {
		Ctx     context.Context
		Tenants []string
	}
	mock.lockGetTags.RLock()
	calls = mock.calls.GetTags
	mock.lockGetTags.RUnlock()
	return calls
}

// GetTypes calls GetTypesFunc.
func (mock *ThingReaderMock) GetTypes(ctx context.Context, tenants []string) ([]string, error) {
	if mock.GetTypesFunc == nil {
		panic("ThingReaderMock.GetTypesFunc: method is nil but ThingReader.GetTypes was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Tenants []string
	}{
		Ctx:     ctx,
		Tenants: tenants,
	}
	mock.lockGetTypes.Lock()
	mock.calls.GetTypes = append(mock.calls.GetTypes, callInfo)
	mock.lockGetTypes.Unlock()
	return mock.GetTypesFunc(ctx, tenants)
}

// GetTypesCalls gets all the calls that were made to GetTypes.
// Check the length with:
//
//	len(mockedThingReader.GetTypesCalls())
func (mock *ThingReaderMock) GetTypesCalls() []struct {
	Ctx     context.Context
	Tenants []string
} {
	var calls []struct {
		Ctx     context.Context
		Tenants []string
	}
	mock.lockGetTypes.RLock()
	calls = mock.calls.GetTypes
	mock.lockGetTypes.RUnlock()
	return calls
}

// QueryThings calls QueryThingsFunc.
func (mock *ThingReaderMock) QueryThings(ctx context.Context, conditions ...storage.ConditionFunc) (storage.QueryResult, error) {
	if mock.QueryThingsFunc == nil {
		panic("ThingReaderMock.QueryThingsFunc: method is nil but ThingReader.QueryThings was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Conditions []storage.ConditionFunc
	}{
		Ctx:        ctx,
		Conditions: conditions,
	}
	mock.lockQueryThings.Lock()
	mock.calls.QueryThings = append(mock.calls.QueryThings, callInfo)
	mock.lockQueryThings.Unlock()
	return mock.QueryThingsFunc(ctx, conditions...)
}

// QueryThingsCalls gets all the calls that were made to QueryThings.
// Check the length with:
//
//	len(mockedThingReader.QueryThingsCalls())
func (mock *ThingReaderMock) QueryThingsCalls() []struct {
	Ctx        context.Context
	Conditions []storage.ConditionFunc
} {
	var calls []struct {
		Ctx        context.Context
		Conditions []storage.ConditionFunc
	}
	mock.lockQueryThings.RLock()
	calls = mock.calls.QueryThings
	mock.lockQueryThings.RUnlock()
	return calls
}

// RetrieveRelatedThings calls RetrieveRelatedThingsFunc.
func (mock *ThingReaderMock) RetrieveRelatedThings(ctx context.Context, conditions ...storage.ConditionFunc) ([]byte, error) {
	if mock.RetrieveRelatedThingsFunc == nil {
		panic("ThingReaderMock.RetrieveRelatedThingsFunc: method is nil but ThingReader.RetrieveRelatedThings was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Conditions []storage.ConditionFunc
	}{
		Ctx:        ctx,
		Conditions: conditions,
	}
	mock.lockRetrieveRelatedThings.Lock()
	mock.calls.RetrieveRelatedThings = append(mock.calls.RetrieveRelatedThings, callInfo)
	mock.lockRetrieveRelatedThings.Unlock()
	return mock.RetrieveRelatedThingsFunc(ctx, conditions...)
}

// RetrieveRelatedThingsCalls gets all the calls that were made to RetrieveRelatedThings.
// Check the length with:
//
//	len(mockedThingReader.RetrieveRelatedThingsCalls())
func (mock *ThingReaderMock) RetrieveRelatedThingsCalls() []struct {
	Ctx        context.Context
	Conditions []storage.ConditionFunc
} {
	var calls []struct {
		Ctx        context.Context
		Conditions []storage.ConditionFunc
	}
	mock.lockRetrieveRelatedThings.RLock()
	calls = mock.calls.RetrieveRelatedThings
	mock.lockRetrieveRelatedThings.RUnlock()
	return calls
}

// RetrieveThing calls RetrieveThingFunc.
func (mock *ThingReaderMock) RetrieveThing(ctx context.Context, conditions ...storage.ConditionFunc) ([]byte, string, error) {
	if mock.RetrieveThingFunc == nil {
		panic("ThingReaderMock.RetrieveThingFunc: method is nil but ThingReader.RetrieveThing was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Conditions []storage.ConditionFunc
	}{
		Ctx:        ctx,
		Conditions: conditions,
	}
	mock.lockRetrieveThing.Lock()
	mock.calls.RetrieveThing = append(mock.calls.RetrieveThing, callInfo)
	mock.lockRetrieveThing.Unlock()
	return mock.RetrieveThingFunc(ctx, conditions...)
}

// RetrieveThingCalls gets all the calls that were made to RetrieveThing.
// Check the length with:
//
//	len(mockedThingReader.RetrieveThingCalls())
func (mock *ThingReaderMock) RetrieveThingCalls() []struct {
	Ctx        context.Context
	Conditions []storage.ConditionFunc
} {
	var calls []struct {
		Ctx        context.Context
		Conditions []storage.ConditionFunc
	}
	mock.lockRetrieveThing.RLock()
	calls = mock.calls.RetrieveThing
	mock.lockRetrieveThing.RUnlock()
	return calls
}
